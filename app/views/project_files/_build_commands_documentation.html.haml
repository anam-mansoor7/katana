%p
  In this file you can put any commands you need to run before each Build
  or to setup your worker.
  It is a bash script and it will run in an Ubuntu 15.10 system. If you find that
  a needed package is missing you can use
  %code
    apt-get
  to install it.

%p
  You can also run commands to create your database (like
  %code
    rake db:create
  in Ruby on Rails).

%p
  %strong
    This script is invoked:
    %ul
      %li
        Once when the worker is first started, after the code
        is fetched.
      %li
        Before every build. Each worker will run this script when running a
        job for a different Build than the Build of the previous job.

%p
  To give you more flexibility on what commands run and when,
  the following environment variables are available in your script:

  %ul
    %li
      %strong WORKER_INITIALIZING
      %br

      This variable is set only when the worker is initializing. It will only run
      once. It is useful when you want to run one off commands.

      %p
        E.g. You want to install bundler gem and phantomjs. This can be achieved as this:
        %br

        :ruby
          code=<<-CODE
          if [[ -n $WORKER_INITIALIZING ]]
          then
            gem install bundler
            apt-get update
            apt-get install -y phantomjs
          fi
          CODE
        %pre= code

    %li
      %strong changed_file_paths_match
      %br

      This is a bash function which checks if any of the changed files between
      the current commit and the previous matches the given string.

      %p
        E.g. You want to reset the database when db/schema.rb file is changed.
        This can be achieved as this:
        %br

        :ruby
          code = <<-CODE
          if changed_file_paths_match "db/schema.rb"
          then
            RAILS_ENV=test rake db:reset
          fi
          CODE
        %pre= code
    %li
      %strong commit_changed
      %br

      This is a bash function that exits with 1 when the current commit is
      different than the last job's. It is useful when you want to run commands
      whenever the commit changes.

      %p
        E.g. You want to install any new gems before running a new commit.
        This can be achieved as this:

        :ruby
          code = <<-CODE
          if commit_changed
          then
            bundle check || bundle install --deployment --path /vendor/bundle --jobs 2 --retry 2
          fi
          CODE
        %pre= code
